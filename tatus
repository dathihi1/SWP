warning: in the working copy of 'study1/src/main/java/com/badat/study1/configuration/DataInitializer.java', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/java/com/badat/study1/configuration/JwtAuthenticationFilter.java', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/java/com/badat/study1/configuration/SecurityConfiguration.java', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/java/com/badat/study1/controller/ViewController.java', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/resources/application.yaml', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/resources/templates/customer/profile.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/resources/templates/login.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'study1/src/main/resources/templates/register.html', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/study1/src/main/java/com/badat/study1/configuration/JwtAuthenticationFilter.java b/study1/src/main/java/com/badat/study1/configuration/JwtAuthenticationFilter.java[m
[1mindex 19970c5..9c650d4 100644[m
[1m--- a/study1/src/main/java/com/badat/study1/configuration/JwtAuthenticationFilter.java[m
[1m+++ b/study1/src/main/java/com/badat/study1/configuration/JwtAuthenticationFilter.java[m
[36m@@ -122,12 +122,7 @@[m [mpublic class JwtAuthenticationFilter extends OncePerRequestFilter {[m
                path.equals("/logout") ||[m
                path.equals("/register") ||[m
                path.equals("/verify-otp") ||[m
[31m-               path.equals("/forgot-password") ||[m
[31m-               path.equals("/profile") ||[m
[31m-               path.equals("/orders") ||[m
[31m-               path.equals("/payment") ||[m
[31m-               path.equals("/payment-history") ||[m
[31m-               path.equals("/change-password");[m
[32m+[m[32m               path.equals("/forgot-password");[m
     }[m
 }[m
 [m
[1mdiff --git a/study1/src/main/java/com/badat/study1/configuration/SecurityConfiguration.java b/study1/src/main/java/com/badat/study1/configuration/SecurityConfiguration.java[m
[1mindex ed20bcf..9802bc0 100644[m
[1m--- a/study1/src/main/java/com/badat/study1/configuration/SecurityConfiguration.java[m
[1m+++ b/study1/src/main/java/com/badat/study1/configuration/SecurityConfiguration.java[m
[36m@@ -27,7 +27,7 @@[m [mpublic class SecurityConfiguration {[m
             "/cart", [m
             "/profile", "/orders", "/payment", "/payment-history", "/change-password",[m
             "/auth/**", [m
[31m-            "/api/auth/login", "/api/auth/login-form", "/api/auth/register", "/api/auth/forgot-password", "/api/auth/verify-otp",[m
[32m+[m[32m            "/api/auth/login", "/api/auth/register", "/api/auth/forgot-password", "/api/auth/verify-otp",[m
             "/users/**", [m
             "/login", "/register", "/verify-otp", "/forgot-password", [m
             "/seller/register", [m
[36m@@ -48,6 +48,9 @@[m [mpublic class SecurityConfiguration {[m
                         .requestMatchers(API_PROTECTED_PATHS).authenticated()[m
                         .anyRequest().authenticated()[m
                 )[m
[32m+[m[32m                .exceptionHandling(e -> e[m
[32m+[m[32m                        .authenticationEntryPoint((req, res, ex) -> res.sendRedirect("/login"))[m
[32m+[m[32m                )[m
                 .sessionManagement(session -> session[m
                         .sessionCreationPolicy(SessionCreationPolicy.STATELESS)[m
                 );[m
[1mdiff --git a/study1/src/main/java/com/badat/study1/controller/AuthenticationController.java b/study1/src/main/java/com/badat/study1/controller/AuthenticationController.java[m
[1mindex 30f7155..b7104fc 100644[m
[1m--- a/study1/src/main/java/com/badat/study1/controller/AuthenticationController.java[m
[1m+++ b/study1/src/main/java/com/badat/study1/controller/AuthenticationController.java[m
[36m@@ -6,10 +6,13 @@[m [mimport com.badat.study1.service.AuthenticationService;[m
 import lombok.RequiredArgsConstructor;[m
 import lombok.extern.slf4j.Slf4j;[m
 import org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseCookie;[m
[32m+[m[32mimport org.springframework.http.HttpHeaders;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.security.core.Authentication;[m
 import org.springframework.security.core.context.SecurityContextHolder;[m
 import org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
 [m
 import java.text.ParseException;[m
 import java.util.HashMap;[m
[36m@@ -24,15 +27,27 @@[m [mpublic class AuthenticationController {[m
     private final AuthenticationService authenticationService;[m
 [m
     @PostMapping("/login")[m
[31m-    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {[m
[32m+[m[32m    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest, HttpServletRequest request) {[m
         try {[m
             log.info("Login attempt for username: {}", loginRequest.getUsername());[m
             [m
     [m
             LoginResponse loginResponse = authenticationService.login(loginRequest);[m
             log.info("Login successful for username: {}", loginRequest.getUsername());[m
[31m-            [m
[31m-            return ResponseEntity.ok(loginResponse);[m
[32m+[m
[32m+[m[32m            // Set HttpOnly access token cookie for browser navigation[m
[32m+[m[32m            boolean secure = request.isSecure();[m
[32m+[m[32m            ResponseCookie accessCookie = ResponseCookie.from("accessToken", loginResponse.getAccessToken())[m
[32m+[m[32m                    .httpOnly(true)[m
[32m+[m[32m                    .secure(secure)[m
[32m+[m[32m                    .path("/")[m
[32m+[m[32m                    .sameSite("Lax")[m
[32m+[m[32m                    .maxAge(60L * 60L) // 1 hour, align with token expiry[m
[32m+[m[32m                    .build();[m
[32m+[m
[32m+[m[32m            return ResponseEntity.ok()[m
[32m+[m[32m                    .header(HttpHeaders.SET_COOKIE, accessCookie.toString())[m
[32m+[m[32m                    .body(loginResponse);[m
             [m
         } catch (Exception e) {[m
             log.error("Login failed for username: {}, error: {}", loginRequest.getUsername(), e.getMessage());[m
[36m@@ -42,18 +57,41 @@[m [mpublic class AuthenticationController {[m
     }[m
 [m
     @PostMapping("/logout")[m
[31m-    public ResponseEntity<?> logout(@RequestHeader(value = "Authorization", required = false) String authHeader) {[m
[32m+[m[32m    public ResponseEntity<?> logout(@RequestHeader(value = "Authorization", required = false) String authHeader, HttpServletRequest request) {[m
         try {[m
[32m+[m[32m            // Prefer header; if missing, try cookie via JwtAuthenticationFilter, but here we only need header token to blacklist[m
             if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[31m-                return ResponseEntity.badRequest()[m
[31m-                    .body(Map.of("error", "Authorization header kh√¥ng h·ª£p l·ªá"));[m
[32m+[m[32m                // Still clear cookie even if header missing[m
[32m+[m[32m                boolean secure = request.isSecure();[m
[32m+[m[32m                ResponseCookie clearCookie = ResponseCookie.from("accessToken", "")[m
[32m+[m[32m                        .httpOnly(true)[m
[32m+[m[32m                        .secure(secure)[m
[32m+[m[32m                        .path("/")[m
[32m+[m[32m                        .sameSite("Lax")[m
[32m+[m[32m                        .maxAge(0)[m
[32m+[m